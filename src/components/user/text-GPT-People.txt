import { useEffect, useState } from 'react';
import avatar from '../../assets/img/user.png';
import { Global } from '../../helpers/Global';

export const People = () => {
  const [users, setUsers] = useState([]);
  const [page, setPage] = useState(1);
  const [more, setMore] = useState(true);
  const [following, setFollowing] = useState([]);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem('token');

  const getUsers = async (nextPage = 1) => {
    setLoading(true);
    try {
      const response = await fetch(`${Global.url}user/list/${nextPage}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: token,
        },
      });
      const data = await response.json();

      if (data.users && data.status === 'success') {
        const newUsers = users.length >= 1 ? [...users, ...data.users] : data.users;
        setUsers(newUsers);
        setFollowing(data.user_following);
        setLoading(false);
        if (users.length >= data.total - data.users.length) {
          setMore(false);
        }
      }
    } catch (error) {
      console.error('Error fetching users:', error);
      setLoading(false);
    }
  };

  const nextPage = () => {
    const next = page + 1;
    setPage(next);
    getUsers(next);
  };

  const follow = async (userId) => {
    try {
      const response = await fetch(`${Global.url}follow/save`, {
        method: 'POST',
        body: JSON.stringify({ followed: userId }),
        headers: {
          'Content-Type': 'application/json',
          Authorization: localStorage.getItem('token'),
        },
      });
      const data = await response.json();

      if (data.status === 'success') {
        setFollowing((prevFollowing) => [...prevFollowing, userId]);
      }
    } catch (error) {
      console.error('Error following user:', error);
    }
  };

  const unfollow = async (userId) => {
    try {
      await fetch(`${Global.url}follow/unfollow/${userId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          Authorization: token,
        },
      });

      setFollowing((prevFollowing) => prevFollowing.filter((id) => id !== userId));
    } catch (error) {
      console.error('Error unfollowing user:', error);
    }
  };

  useEffect(() => {
    getUsers(page);
  }, [page]);

  return (
    <>
      <section className="layout__content">
        <header className="content__header">
          <h1 className="content__title">Gente</h1>
        </header>

        <div className="content__posts">
          {loading ? 'Cargando...' : ''}
          {users.map((user) => (
            <article className="posts__post" key={user._id}>
              <div className="post__container">
                <div className="post__image-user">
                  <a href="#" className="post__image-link">
                    {user.image !== 'default.png' && (
                      <img
                        src={`${Global.url}user/avatar/${user.image}`}
                        className="post__user-image"
                        alt="Foto de perfil"
                      />
                    )}
                    {user.image === 'default.png' && (
                      <img src={avatar} className="post__user-image" alt="Foto de perfil" />
                    )}
                  </a>
                </div>
                <div className="post__body">
                  <div className="post__user-info">
                    <a href="#" className="user-info__name">{`${user.name} ${user.surname}`}</a>
                    <span className="user-info__divider"> | </span>
                    <a href="#" className="user-info__create-date">
                      {user.created_at}
                    </a>
                  </div>
                  <h4 className="post__content">{user.bio}</h4>
                </div>
              </div>
              <div className="post__buttons">
                {!following.includes(user._id) && (
                  <button
                    className="post__button--green"
                    onClick={() => follow(user._id)}
                  >
                    Seguir
                  </button>
                )}
                {following.includes(user._id) && (
                  <button
                    className="post__button"
                    onClick={() => unfollow(user._id)}
                  >
                    Dejar de seguir
                  </button>
                )}
              </div>
            </article>
          ))}
        </div>

        {more && (
          <div className="content__container-btn">
            <button className="content__btn-more-post" onClick={nextPage}>
              Actualizar
            </button>
          </div>
        )}
      </section>
    </>
  );
};